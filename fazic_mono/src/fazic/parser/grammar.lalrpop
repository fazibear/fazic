use fazic::ast::{NodeElement, Opcode};
use fazic::parser::node_builder::*;

grammar;

pub all: NodeElement = {
    command,
    expression
};

expression: NodeElement = {
    <l:expression> "OR" <r:prec_1> => param_2_node(Opcode::Or, l, r),
    <l:expression> "AND" <r:prec_1> => param_2_node(Opcode::And, l, r),
    prec_1
};

prec_1: NodeElement = {
    prec_2
};

prec_2: NodeElement = {
    <l:prec_2> "+" <r:prec_3> => param_2_node(Opcode::Add, l, r),
    <l:prec_2> "-" <r:prec_3> => param_2_node(Opcode::Sub, l, r),
    prec_3,
};

prec_3: NodeElement = {
    <l:prec_3> "*" <r:term> => param_2_node(Opcode::Mul, l, r),
    <l:prec_3> "/" <r:term> => param_2_node(Opcode::Div, l, r),
    term,
};

term: NodeElement = {
    function,
    integer,
    float,
    string,
    "(" <expression> ")",
};


function: NodeElement = {
    "ABS(" <expression> ")" => param_1_node(Opcode::Abs, <>),
};

command: NodeElement = {
    "?" <expression> => param_1_node(Opcode::Print, <>),
    "PRINT" <expression> => param_1_node(Opcode::Print, <>),
};

string: NodeElement = {
    <r"'.*'"> => string_node(<>),
    <r#"".*""#> => string_node(<>),
};

float: NodeElement = {
    r"[0-9]*\.[0-9]+" => float_node(<>),
};

integer: NodeElement = {
    r"[0-9]+" => integer_node(<>),
};
