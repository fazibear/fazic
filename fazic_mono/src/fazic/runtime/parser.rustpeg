use fazic::runtime::ast::*;
use fazic::runtime::node_builder::*;

pub parse_all -> Entry
    = i:integer _ a:(all ++ ":") { entry_node(Some(i), a) }
    / a:(all ++ ":") { entry_node(None, a) }

all -> NodeElement
    = _ c:command _ { c }
    / _ e:expression _ { e }

command -> NodeElement
    = ("?" / "PRINT" / "print") _ e:expression { node(Opcode::Print, vec![e]) }

    / ("GOTO" / "goto") _ i:integer { node(Opcode::Goto, vec![i]) }
    / ("GOSUB" / "gosub") _ i:integer { node(Opcode::Gosub, vec![i]) }

    / ("LET" / "let") _ v:varname _ "=" _ e:expression { node(Opcode::Let, vec![v, e]) }

    / ("FOR" / "for") _ v:varname _ "=" _ e:expression _ ("TO" / "to") _ t:expression _ ("STEP" / "step") _ s:expression { node(Opcode::For, vec![v, e, t, s]) }
    / ("FOR" / "for") _ v:varname _ "=" _ e:expression _ ("TO" / "to") _ t:expression { node(Opcode::For, vec![v, e, t, integer_node("1")]) }

    / ("NEXT" / "next" ) _ v:(varname ++ (_ "," _) ) { node(Opcode::Next, v) }
    / ("NEXT" / "next" ) { node(Opcode::Next, vec![]) }

    / ("RETURN" / "return") { node(Opcode::Return, vec![]) }
    / ("LIST" / "list")  { node(Opcode::List, vec![]) }
    / ("REM" / "rem") .* { node(Opcode::Rem, vec![]) }
    / ("RUN" / "run")  { node(Opcode::Run, vec![]) }
    / ("END" / "end")  { node(Opcode::End, vec![]) }

function -> NodeElement
    = ("ABS(" / "abs(") _ e:expression _ ")" { node(Opcode::Abs, vec![e]) }

expression -> NodeElement
    = #infix<term> {
        #L l ("AND" / "and") r { node(Opcode::And, vec![l, r]) }
           l ("OR" / "or") r { node(Opcode::Or, vec![l, r]) }
        #L l "="  r { node(Opcode::Eql, vec![l, r]) }
           l "==" r { node(Opcode::Eql, vec![l, r]) }
           l "!=" r { node(Opcode::NotEql, vec![l, r]) }
           l "<>" r { node(Opcode::NotEql, vec![l, r]) }
           l "<"  r { node(Opcode::Lt, vec![l, r]) }
           l ">"  r { node(Opcode::Gt, vec![l, r]) }
           l "<=" r { node(Opcode::LtEql, vec![l, r]) }
           l ">=" r { node(Opcode::GtEql, vec![l, r]) }
           l "=<" r { node(Opcode::LtEql, vec![l, r]) }
           l "=>" r { node(Opcode::GtEql, vec![l, r]) }
        #L l "+"  r { node(Opcode::Add, vec![l, r]) }
           l "-"  r { node(Opcode::Sub, vec![l, r]) }
        #L l "*"  r { node(Opcode::Mul, vec![l, r]) }
           l "/"  r { node(Opcode::Div, vec![l, r]) }
        #R l "^"  r { node(Opcode::Pow, vec![l, r]) }
    }

term -> NodeElement
    = _ f:float _ { f }
    / _ i:integer _ { i }
    / _ s:string _ { s }
    / _ f:function _ { f }
    / _ "(" _ e:expression _ ")" _ { e }
    / _ "-" _ t:term _ { node(Opcode::Neg, vec![t]) }
    / _ ("NOT" / "not") _ e:expression _ { node(Opcode::Not, vec![e]) }
    / _ v:variable _ { v }

float -> NodeElement
    = f:$([0-9]* "." [0-9]+) { println!("{}", f); float_node(f) }

integer -> NodeElement
    = i:$([0-9]+) { integer_node(i) }

string -> NodeElement
    = "\"" s:$([^"]*) "\"" { string_node(s) }
    / "'" s:$([^']*) "'" { string_node(s) }

variable -> NodeElement
    = v:$([a-zA-Z]+) { variable_node(v) }

 varname -> NodeElement
     = v:$([a-zA-Z]+) { variable_name(v) }

_ = #quiet<" "*>
