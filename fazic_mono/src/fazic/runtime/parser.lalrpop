use fazic::runtime::ast::{Entry, NodeElement, Opcode};
use fazic::runtime::node_builder::*;

grammar;

pub all: Entry = {
    <ast:all_list> => { entry_node(None, ast) },
    <line:r"[0-9]+"> <ast:all_list> => { entry_node(Some(line), ast) },
};

all_list: Vec<NodeElement> = {
    <ast:command> => vec![ast],
    <ast:expression> => vec![ast],
    <ast:command> ":" <rest:all_list> => {
        let mut cmds = vec![ast];
        cmds.extend(rest);
        cmds

    },
    <ast:expression> ":" <rest:all_list> => {
        let mut cmds = vec![ast];
        cmds.extend(rest);
        cmds
    },
};

expression: NodeElement = {
    <l:expression> r"(?i)OR" <r:prec_1> => param_2_node(Opcode::Or, l, r),
    <l:expression> r"(?i)AND" <r:prec_1> => param_2_node(Opcode::And, l, r),
    prec_1
};

prec_1: NodeElement = {
    prec_2
};

prec_2: NodeElement = {
    <l:prec_2> "+" <r:prec_3> => param_2_node(Opcode::Add, l, r),
    <l:prec_2> "-" <r:prec_3> => param_2_node(Opcode::Sub, l, r),
    prec_3,
};

prec_3: NodeElement = {
    <l:prec_3> "*" <r:term> => param_2_node(Opcode::Mul, l, r),
    <l:prec_3> "/" <r:term> => param_2_node(Opcode::Div, l, r),
    term,
};

term: NodeElement = {
    function,
    integer,
    float,
    uinteger,
    ufloat,
    string,
    "(" <expression> ")",
};


function: NodeElement = {
    r"(?i)ABS\(" <expression> ")" => param_1_node(Opcode::Abs, <>),
};

command: NodeElement = {
    "?" <expression> => param_1_node(Opcode::Print, <>),
    r"(?i)PRINT" <expression> => param_1_node(Opcode::Print, <>),
    r"(?i)LIST" => param_0_node(Opcode::List),
    r"(?i)REM.*" => param_0_node(Opcode::Rem),
    r"(?i)RUN" => param_0_node(Opcode::Run),
    r"(?i)GOTO" <integer> => param_1_node(Opcode::Goto, <>),
};

string: NodeElement = {
    r"'.*'" => string_node(<>),
    r#"".*""# => string_node(<>),
};

float: NodeElement = {
    r"[0-9]*\.[0-9]+" => float_node(<>),
};

integer: NodeElement = {
    r"[0-9]+" => integer_node(<>),
};

ufloat: NodeElement = {
    r"-[0-9]*\.[0-9]+" => float_node(<>),
};

uinteger: NodeElement = {
    r"-[0-9]+" => integer_node(<>),
};
